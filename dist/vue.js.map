{"version":3,"file":"vue.js","sources":["../src/observe/array.js","../src/observe/index.js","../src/state.js","../src/init.js","../src/index.js"],"sourcesContent":["let oldArrayPrototype = Array.prototype;\n// arrayProptotype.__proto__ = Array.prototype;\n\nlet arrayPrototype = Object.create(oldArrayPrototype);\nlet methods = [\n    'push',\n    'pop',\n    'shift',\n    'unshift',\n    'reverse',\n    'sort',\n    'splice'\n]\n// 重写数组 7 方法 （目的就是对新增的数据再次进行观测 避免里面出现没有监听到的对象数据）\n// 如 arr[1000] = 1234 更改数组会响应式是通过 $set 实现的\nmethods.forEach(method => { // 用户调用push方法会先经历我自己重写的方法,之后调用数组原来的方法\n    arrayPrototype[method] = function(...args) {\n        console.log('数组修改了')\n\n        let inserted;\n        let ob = this.__ob__;\n        switch (method) {\n            case 'push':\n            case 'unshift':\n                inserted = args; // 数组\n                break;\n            case 'splice': // arr.splice(1,1,xxx)\n                inserted = args.slice(2); // 接去掉前两个参数\n            default:\n                break\n        }\n        if (inserted) {\n            // 对新增的数据再次进行观测\n            ob.observeArray(inserted)\n        }\n        return oldArrayPrototype[method].call(this, ...args)\n    }\n})\nexport default arrayPrototype\n\n","import arrayPrototype from \"./array\";\n\nclass Observer{\n    constructor(data){\n        // 如果是数组的话也是用defineProperty会浪费很多性能 很少用户会通过arr[878] = 123\n        // vue3中的polyfill 直接就给数组做代理了\n         // 改写数组的方法，如果用户调用了可以改写数组方法的api 那么我就去劫持这个方法\n        // 变异方法 push pop shift unshift reverse sort splice \n        Object.defineProperty(data,'__ob__',{\n            value:this,\n            enumerable:false\n        })\n         // 如果有__ob__属性 说明被观测过了\n        // 修改数组的索引和长度是无法更新视图的\n        if(Array.isArray(data)){\n            // 需要重写这7个方法\n            data.__proto__ = arrayPrototype; \n            // 直接将属性赋值给这个对象\n            // 如果数组里面放的是对象类型 我期望他也会被变成响应式的\n            this.observeArray(data);\n        }else{\n            this.walk(data)\n        }\n    }\n    observeArray(data){\n        data.forEach(item=> observe(item)); //如果是对象我才进行观测了  \n    }\n    walk(data){ // 循环对象 尽量不用for in （会遍历原型链）\n        let keys = Object.keys(data); // [0,1,2]\n        keys.forEach(key=> { //没有重写数组里的每一项\n            defineReactive(data,key,data[key])\n        })\n    }\n}\n// 性能不好的原因在于 所有的属性都被重新定义了一遍\n// 一上来需要将对象深度代理 性能差\nfunction defineReactive(data,key,value){ //  闭包\n    // 属性会全部被重写增加了get和set\n    observe(value); // 递归代理属性\n    Object.defineProperty(data,key,{\n        get(){ // vm.xxx\n            return value;\n        },\n        set(newValue){ // vm.xxx = {a:1} 赋值一个对象的话 也可以实现响应式数据\n            if(newValue === value) return\n            observe(newValue)\n            value = newValue;\n        }\n    })\n}\nexport function observe(data) {\n    if(typeof data !== 'object' || data == null){\n        return ; // 如果不是对象类型，那么不要做任何处理\n    }\n    if(data.__ob__){\n        // 说明这个属性已经被代理过了\n        return data\n    }\n\n    // 我稍后要区分 如果一个对象已经被观测了，就不要再次被观测了\n    // __ob__ 标识是否有被观测过\n\n    return new Observer(data)\n};\n\n\n// 每个类头有一个prototype 指向了一个公共的空间\n// 每个实例可以通过__proto__ 找到所属类的prototype对应的内容\n\n\n\n// 1.在Vue2中对象的响应式原理，就是给每个属性增加get和set，而且是递归操作 （用户在写代码的时候尽量不要把所有的属性都放在data中，层次尽可能不要太深）, 赋值一个新对象也会被变成响应式的\n// 2.数组没有使用defineProperty 采用的是函数劫持创造一个新的原型重写了这个原型的7个方法，用户在调用的时候采用的是这7个方法。我们增加了逻辑如果是新增的数据会再次被劫持 。 最终调用数组的原有方法 （注意数字的索引和长度没有被监控）  数组中对象类型会被进行响应式处理","import { observe } from \"./observe/index\";\n\nexport function initState(vm) {\n    const options = vm.$options\n\n    // 后续实现计算属性 、 watcher 、 props 、methods\n    if (options.data) {\n        initData(vm);\n    }\n}\n\nfunction proxy(vm, source, key) {\n    Object.defineProperty(vm, key, {\n        get() {\n            return vm[source][key]\n        },\n        set(newValue) {\n            vm[source][key] = newValue;\n        }\n    })\n}\n\nfunction initData(vm) {\n    let data = vm.$options.data;\n    // 如果是函数就拿到函数的返回值 否则就直接采用data作为数据源\n    data = vm._data = typeof data === 'function' ? data.call(vm) : data\n\n    // 属性劫持 采用defineProperty将所有的属性进行劫持\n\n    // 我期望用户可以直接通过 vm.xxx 获取值， 也可以这样取值 vm._data.xxx\n    for (let key in data) {\n        proxy(vm, '_data', key)\n    }\n    observe(data)\n}","import { initState } from \"./state\";\n\nexport default function initMixin(Vue) {\n    Vue.prototype._init = function(options) {\n        const vm = this;\n        vm.$options = options // 所有后续的扩展方法都有一个$options选项可以获取用户的所有选项\n        // 对于实例的数据源 props data methods computed watch\n        // props data\n        initState(vm);\n        // vue中会判断如果是$开头的属性不会被变成响应式数据\n\n\n\n        // 状态初始化完毕后需要进行页面挂载\n        if (vm.$options.el) { // el 属性 和直接调用$mount是一样的\n            vm.$mount(vm.$options.el)\n        }\n    }\n    Vue.prototype.$mount = function(el) {\n        const vm = this;\n        el = document.querySelector(el);\n        const options = vm.$options;\n        if (!options.render) {\n            let template = options.template;\n            if (!template) {\n                template = el.outerHTML\n            }\n            // 将template变成render函数\n\n            // 创建render函数 -》 虚拟dom  -》 渲染真实dom\n\n            // const render =  compileToFunction(template); // 开始编译\n            // options.render = render;\n        }\n        // options.render // 一定存在了\n    }\n}","// 整个自己编写的Vue的入口\n\nimport initMixin from \"./init\"\n\n// es6的类 要求所有的扩展都在类的内部来进行扩展\n\nfunction Vue(options){\n    this._init(options);\n}\ninitMixin(Vue);// 后续在扩展都可以采用这种方式\n\n// 给Vue添加原型方法我们通过文件的方式来添加，防止所有的功能都在一个文件中来处理\nexport default Vue"],"names":["oldArrayPrototype","Array","prototype","arrayPrototype","Object","create","methods","forEach","method","console","log","inserted","ob","__ob__","args","slice","observeArray","call","Observer","data","defineProperty","value","enumerable","isArray","__proto__","walk","item","observe","keys","key","defineReactive","get","set","newValue","initState","vm","options","$options","initData","proxy","source","_data","initMixin","Vue","_init","el","$mount","document","querySelector","render","template"],"mappings":"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"}